/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_MYHAL_H
#define _MOCK_MYHAL_H

#include "unity.h"
#include "myHAL.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_myHAL_Init(void);
void mock_myHAL_Destroy(void);
void mock_myHAL_Verify(void);




#define SPI_TXBuffer_Ignore() SPI_TXBuffer_CMockIgnore()
void SPI_TXBuffer_CMockIgnore(void);
#define SPI_TXBuffer_Expect(buffer, len) SPI_TXBuffer_CMockExpect(__LINE__, buffer, len)
void SPI_TXBuffer_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t* buffer, uint32_t len);
typedef void (* CMOCK_SPI_TXBuffer_CALLBACK)(uint8_t* buffer, uint32_t len, int cmock_num_calls);
void SPI_TXBuffer_AddCallback(CMOCK_SPI_TXBuffer_CALLBACK Callback);
void SPI_TXBuffer_Stub(CMOCK_SPI_TXBuffer_CALLBACK Callback);
#define SPI_TXBuffer_StubWithCallback SPI_TXBuffer_Stub
#define SPI_TXByte_Ignore() SPI_TXByte_CMockIgnore()
void SPI_TXByte_CMockIgnore(void);
#define SPI_TXByte_Expect(data) SPI_TXByte_CMockExpect(__LINE__, data)
void SPI_TXByte_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t data);
typedef void (* CMOCK_SPI_TXByte_CALLBACK)(uint8_t data, int cmock_num_calls);
void SPI_TXByte_AddCallback(CMOCK_SPI_TXByte_CALLBACK Callback);
void SPI_TXByte_Stub(CMOCK_SPI_TXByte_CALLBACK Callback);
#define SPI_TXByte_StubWithCallback SPI_TXByte_Stub
#define GPIO_SetPin_Ignore() GPIO_SetPin_CMockIgnore()
void GPIO_SetPin_CMockIgnore(void);
#define GPIO_SetPin_Expect(Port, Pin) GPIO_SetPin_CMockExpect(__LINE__, Port, Pin)
void GPIO_SetPin_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t Port, uint16_t Pin);
typedef void (* CMOCK_GPIO_SetPin_CALLBACK)(uint16_t Port, uint16_t Pin, int cmock_num_calls);
void GPIO_SetPin_AddCallback(CMOCK_GPIO_SetPin_CALLBACK Callback);
void GPIO_SetPin_Stub(CMOCK_GPIO_SetPin_CALLBACK Callback);
#define GPIO_SetPin_StubWithCallback GPIO_SetPin_Stub
#define GPIO_ResetPin_Ignore() GPIO_ResetPin_CMockIgnore()
void GPIO_ResetPin_CMockIgnore(void);
#define GPIO_ResetPin_Expect(Port, Pin) GPIO_ResetPin_CMockExpect(__LINE__, Port, Pin)
void GPIO_ResetPin_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t Port, uint16_t Pin);
typedef void (* CMOCK_GPIO_ResetPin_CALLBACK)(uint16_t Port, uint16_t Pin, int cmock_num_calls);
void GPIO_ResetPin_AddCallback(CMOCK_GPIO_ResetPin_CALLBACK Callback);
void GPIO_ResetPin_Stub(CMOCK_GPIO_ResetPin_CALLBACK Callback);
#define GPIO_ResetPin_StubWithCallback GPIO_ResetPin_Stub
#define HAL_Delay_Ignore() HAL_Delay_CMockIgnore()
void HAL_Delay_CMockIgnore(void);
#define HAL_Delay_Expect(ms) HAL_Delay_CMockExpect(__LINE__, ms)
void HAL_Delay_CMockExpect(UNITY_LINE_TYPE cmock_line, uint16_t ms);
typedef void (* CMOCK_HAL_Delay_CALLBACK)(uint16_t ms, int cmock_num_calls);
void HAL_Delay_AddCallback(CMOCK_HAL_Delay_CALLBACK Callback);
void HAL_Delay_Stub(CMOCK_HAL_Delay_CALLBACK Callback);
#define HAL_Delay_StubWithCallback HAL_Delay_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
